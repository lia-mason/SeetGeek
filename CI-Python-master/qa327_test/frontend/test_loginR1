import pytest
from seleniumbase import BaseCase

from qa327_test.conftest import base_url
from unittest.mock import patch
from qa327.models import db, User
from werkzeug.security import generate_password_hash, check_password_hash

# Moch a sample user
test_user = User(
    email='test_frontend@test.com',
    name='Test_frontend',
    password=generate_password_hash('test_frontend')
)

# Moch some sample tickets
test_tickets = [
    {'name': 't1', 'price': '100'}
]


class R1TestCases(BaseCase):

   
    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    #Test R1.1: If the user hasn't logged in, show the login page
    def test_r1_1(self, *_):
        self.open(base_url + '/logout')
        self.open(base_url + '/login')
        self.assert_element("#title")

    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    #Test R1.2: the login page has a message that by default says 'please login'
    def test_r1_2(self, *_): 
        self.open(base_url + '/logout')
        self.open(base_url + '/login')
        self.assert_element("#title")
        self.assert_text("Log In", "#title")

    # @patch('qa327.backend.get_user', return_value=test_user)
    # @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    # #Test R1.3: if the user has logged in, redirect to the user profile page
    # def test_r1_3(self,*_): 
    #     self.open(base_url + '/logout')
    #     self.open(base_url + '/login')
    #     self.type("#email", "test_frontend@test.com")
    #     self.type("#password", "Test_frontend")
    #     self.click('input[type="submit"]')
    #     #self.open(base_url + '/')
    #     self.assert_element("#welcome-header")

    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    #Test R1.4: The login page provides a login form which requests two fields: email and passwords
    def test_r1_4(self, *_): 
        self.open(base_url + '/logout')
        self.open(base_url + '/login')
        self.assert_element("#email")
        self.assert_element("#password")

    #Test R1.5: The login form can be submitted as a POST request to the current URL (/login)
    # def R1_5(self, *_):

    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    #Test R1.6: Email and password both cannot be empty
    def test_r1_6(self, *_): 
        self.open(base_url + '/logout')
        self.open(base_url + '/login')
        self.click('input[type="submit"]')
        self.assert_element("#email")
    
    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    #Test R1.6: Email is empty
    def test_r1_6NoEmail(self, *_): 
        self.open(base_url + '/logout')
        self.open(base_url + '/login')
        self.type("#password", "Test_frontend")
        self.click('input[type="submit"]')
       
        # test if the page loads correctly
        self.assert_element("#email")
    
    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    #Test R1.6: Password is empty
    def test_r1_6NoPassword(self, *_): 
        self.open(base_url + '/logout')
        self.open(base_url + '/login')
        self.type("#email", "test_frontend@test.com")
        self.click('input[type="submit"]')
        # test if the page loads correctly
        self.assert_element("#email")


    # @patch('qa327.backend.get_user', return_value=test_user)
    # @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    #Test R1.7: Email has to follow addr-spec defined in RFC 5322 (see https://en.wikipedia.org/wiki/Email_address for a human-friendly explanation)
    # def test_r1_7Pos(self,*_): 
    #     self.open(base_url + '/logout')
    #     self.open(base_url + '/login')
    #     self.type("#email", "test_frontend@test.com")
    #     self.type("#password", "Test_frontend")
    #     self.click('input[type="submit"]')
    #     #self.open(base_url + '/')
    #     # test if the page loads correctly
    #     self.assert_element("#welcome-header")

    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    def test_r1_7Neg(self,*_): 
        self.open(base_url + '/logout')
        self.open(base_url + '/login')
        self.type("#email", "t.com")
        self.type("#password", "Test_frontend")
        self.click('input[type="submit"]')
        self.assert_element("#message")
        self.assert_text("email/password format is incorrect", "#message")

    # @patch('qa327.backend.get_user', return_value=test_user)
    # @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    #Test R1.8:Password has to meet the required complexity: minimum length 6, at least one upper case, at least one lower case, and at least one special character
    # def test_r1_8Pos(self,*_):
    #     self.open(base_url + '/logout')
    #     self.open(base_url + '/login')
    #     self.type("#email", "test_frontend@test.com")
    #     self.type("#password", "Test_frontend")
    #     self.click('input[type="submit"]')
    #     #self.open(base_url  + '/')
    #     # test if the page loads correctly
    #     self.assert_element("#welcome-header")

    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    def test_r1_8Neg(self,*_): 
        self.open(base_url + '/logout')
        self.open(base_url + '/login')
        self.type("#email", "test_frontend@test.com")
        self.type("#password", "fail")
        self.click('input[type="submit"]')
        self.assert_element("#message")
        self.assert_text("email/password format is incorrect", "#message")

    @patch('qa327.backend.get_user', return_value=test_user)
    @patch('qa327.backend.get_all_tickets', return_value=test_tickets)
    def test_login_password_failed(self, *_):
        """ Login and verify if the tickets are correctly listed."""
        # open login page
        self.open(base_url + '/login')
        # fill wrong email and password
        self.type("#email", "test_frontend@test.com")
        self.type("#password", "wrong_password")
        # click enter button
        self.click('input[type="submit"]')
        # make sure it shows proper error message
        self.assert_element("#message")
        self.assert_text("email/password format is incorrect", "#message")
